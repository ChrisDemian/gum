# newdoc id = GUM_whow_languages
# sent_id = GUM_whow_languages-1
# text = Method 2 of 2 : Using Grammar
# s_type=frag
1	Method	method	NOUN	NN	_	0	root	_	_
2	2	2	NUM	CD	_	1	nummod	_	_
3	of	of	ADP	IN	_	4	case	_	_
4	2	2	NUM	CD	_	1	nmod	_	_
5	:	:	PUNCT	:	_	6	punct	_	_
6	Using	use	VERB	VBG	_	1	appos	_	_
7	Grammar	grammar	NOUN	NN	_	6	obj	_	_

# sent_id = GUM_whow_languages-2
# text = Name your language .
# s_type=imp
1	Name	name	VERB	VB	_	0	root	_	_
2	your	your	PRON	PRP$	_	3	nmod:poss	_	_
3	language	language	NOUN	NN	_	1	obj	_	_
4	.	.	PUNCT	.	_	1	punct	_	_

# sent_id = GUM_whow_languages-3
# text = This is the most fundamental property in all languages .
# s_type=decl
1	This	this	PRON	DT	_	6	nsubj	_	_
2	is	be	AUX	VBZ	_	6	cop	_	_
3	the	the	DET	DT	_	6	det	_	_
4	most	most	ADV	RBS	_	5	advmod	_	_
5	fundamental	fundamental	ADJ	JJ	_	6	amod	_	_
6	property	property	NOUN	NN	_	0	root	_	_
7	in	in	ADP	IN	_	9	case	_	_
8	all	all	DET	DT	_	9	det	_	_
9	languages	language	NOUN	NNS	_	6	nmod	_	_
10	.	.	PUNCT	.	_	6	punct	_	_

# sent_id = GUM_whow_languages-4
# text = You have many names to choose from .
# s_type=decl
1	You	you	PRON	PRP	_	2	nsubj	_	_
2	have	have	VERB	VBP	_	0	root	_	_
3	many	many	ADJ	JJ	_	4	amod	_	_
4	names	name	NOUN	NNS	_	2	obj	_	_
5	to	to	PART	TO	_	6	mark	_	_
6	choose	choose	VERB	VB	_	4	acl	_	_
7	from	from	ADP	IN	_	6	obl	_	_
8	.	.	PUNCT	.	_	2	punct	_	_

# sent_id = GUM_whow_languages-5
# text = You can even use a made up word from your made up language like ' Victory ' or ' Great Language ' .
# s_type=decl
1	You	you	PRON	PRP	_	4	nsubj	_	_
2	can	can	AUX	MD	_	4	aux	_	_
3	even	even	ADV	RB	_	4	advmod	_	_
4	use	use	VERB	VB	_	0	root	_	_
5	a	a	DET	DT	_	8	det	_	_
6	made	make	VERB	VBN	_	8	amod	_	_
7	up	up	ADP	RP	_	6	compound:prt	_	_
8	word	word	NOUN	NN	_	4	obj	_	_
9	from	from	ADP	IN	_	13	case	_	_
10	your	your	PRON	PRP$	_	13	nmod:poss	_	_
11	made	make	VERB	VBN	_	13	amod	_	_
12	up	up	ADP	RP	_	11	compound:prt	_	_
13	language	language	NOUN	NN	_	8	nmod	_	_
14	like	like	ADP	IN	_	16	case	_	_
15	'	'	PUNCT	``	_	16	punct	_	_
16	Victory	Victory	PROPN	NNP	_	13	nmod	_	_
17	'	'	PUNCT	''	_	16	punct	_	_
18	or	or	CCONJ	CC	_	20	cc	_	_
19	'	'	PUNCT	``	_	20	punct	_	_
20	Great	Great	PROPN	NNP	_	16	conj	_	_
21	Language	Language	PROPN	NNP	_	20	flat	_	_
22	'	'	PUNCT	''	_	20	punct	_	_
23	.	.	PUNCT	.	_	4	punct	_	_

# sent_id = GUM_whow_languages-6
# text = The choice is all yours .
# s_type=decl
1	The	the	DET	DT	_	2	det	_	_
2	choice	choice	NOUN	NN	_	5	nsubj	_	_
3	is	be	AUX	VBZ	_	5	cop	_	_
4	all	all	DET	PDT	_	5	det	_	_
5	yours	yours	PRON	PRP$	_	0	root	_	_
6	.	.	PUNCT	.	_	5	punct	_	_

# sent_id = GUM_whow_languages-7
# text = Start off with the highly frequently used words such as ' and ' or ' I ' or ' one ' or ' the ' .
# s_type=imp
1	Start	start	VERB	VB	_	0	root	_	_
2	off	off	ADP	RP	_	1	compound:prt	_	_
3	with	with	ADP	IN	_	8	case	_	_
4	the	the	DET	DT	_	8	det	_	_
5	highly	highly	ADV	RB	_	6	advmod	_	_
6	frequently	frequently	ADV	RB	_	7	advmod	_	_
7	used	use	VERB	VBN	_	8	amod	_	_
8	words	word	NOUN	NNS	_	1	obl	_	_
9	such	such	ADJ	JJ	_	8	nmod	_	_
10	as	as	ADP	IN	_	12	case	_	_
11	'	'	PUNCT	``	_	12	punct	_	_
12	and	and	CCONJ	CC	_	9	fixed	_	_
13	'	'	PUNCT	''	_	12	punct	_	_
14	or	or	CCONJ	CC	_	20	cc	_	_
15	'	'	PUNCT	``	_	16	punct	_	_
16	I	I	PRON	PRP	_	12	conj	_	_
17	'	'	PUNCT	''	_	16	punct	_	_
18	or	or	CCONJ	CC	_	20	cc	_	_
19	'	'	PUNCT	``	_	20	punct	_	_
20	one	one	NUM	CD	_	12	conj	_	_
21	'	'	PUNCT	''	_	20	punct	_	_
22	or	or	CCONJ	CC	_	24	cc	_	_
23	'	'	PUNCT	``	_	24	punct	_	_
24	the	the	PRON	DT	_	12	conj	_	_
25	'	'	PUNCT	''	_	24	punct	_	_
26	.	.	PUNCT	.	_	1	punct	_	_

# sent_id = GUM_whow_languages-8
# text = It is recommend that you use short words since they are commonly used .
# s_type=decl
1	It	it	PRON	PRP	_	3	nsubj:pass	_	_
2	is	be	AUX	VBZ	_	3	aux:pass	_	_
3	recommend	recommend	VERB	VBN	_	0	root	_	_
4	that	that	SCONJ	IN	_	6	mark	_	_
5	you	you	PRON	PRP	_	6	nsubj	_	_
6	use	use	VERB	VBP	_	3	ccomp	_	_
7	short	short	ADJ	JJ	_	8	amod	_	_
8	words	word	NOUN	NNS	_	6	obj	_	_
9	since	since	SCONJ	IN	_	13	mark	_	_
10	they	they	PRON	PRP	_	13	nsubj:pass	_	_
11	are	be	AUX	VBP	_	13	aux:pass	_	_
12	commonly	commonly	ADV	RB	_	13	advmod	_	_
13	used	use	VERB	VBN	_	3	advcl	_	_
14	.	.	PUNCT	.	_	3	punct	_	_

# sent_id = GUM_whow_languages-9
# text = An example would be ' ant ' for and or ' es ' or even ' loo ' for the word ' and ' .
# s_type=sub
1	An	an	DET	DT	_	2	det	_	_
2	example	example	NOUN	NN	_	6	nsubj	_	_
3	would	would	AUX	MD	_	6	aux	_	_
4	be	be	AUX	VB	_	6	cop	_	_
5	'	'	PUNCT	``	_	6	punct	_	_
6	ant	ant	X	FW	_	0	root	_	_
7	'	'	PUNCT	''	_	6	punct	_	_
8	for	for	ADP	IN	_	9	case	_	_
9	and	and	CCONJ	CC	_	6	nmod	_	_
10	or	or	CCONJ	CC	_	12	cc	_	_
11	'	'	PUNCT	``	_	12	punct	_	_
12	es	es	X	FW	_	9	conj	_	_
13	'	'	PUNCT	''	_	12	punct	_	_
14	or	or	CCONJ	CC	_	17	cc	_	_
15	even	even	ADV	RB	_	6	advmod	_	_
16	'	'	PUNCT	``	_	17	punct	_	_
17	loo	loo	X	FW	_	9	conj	_	_
18	'	'	PUNCT	''	_	17	punct	_	_
19	for	for	ADP	IN	_	21	case	_	_
20	the	the	DET	DT	_	21	det	_	_
21	word	word	NOUN	NN	_	17	nmod	_	_
22	'	'	PUNCT	``	_	23	punct	_	_
23	and	and	CCONJ	CC	_	21	appos	_	_
24	'	'	PUNCT	''	_	23	punct	_	_
25	.	.	PUNCT	.	_	6	punct	_	_

# sent_id = GUM_whow_languages-10
# text = Start thinking about the grammar rules .
# s_type=imp
1	Start	start	VERB	VB	_	0	root	_	_
2	thinking	think	VERB	VBG	_	1	xcomp	_	_
3	about	about	ADP	IN	_	6	case	_	_
4	the	the	DET	DT	_	6	det	_	_
5	grammar	grammar	NOUN	NN	_	6	compound	_	_
6	rules	rule	NOUN	NNS	_	2	obl	_	_
7	.	.	PUNCT	.	_	1	punct	_	_

# sent_id = GUM_whow_languages-11
# text = For example if the word Bird is ' Vogelaviatiolap ' then why not make the word Birds ' Vogelaviatiolaps ' since the suffix ' s ' is added at the end for most languages at plurals .
# s_type=inf
1	For	for	ADP	IN	_	2	case	_	_
2	example	example	NOUN	NN	_	28	dep	_	_
3	if	if	SCONJ	IN	_	9	mark	_	_
4	the	the	DET	DT	_	6	det	_	_
5	word	word	NOUN	NN	_	6	appos	_	_
6	Bird	Bird	NOUN	NN	_	9	nsubj	_	_
7	is	be	AUX	VBZ	_	9	cop	_	_
8	'	'	PUNCT	``	_	9	punct	_	_
9	Vogelaviatiolap	Vogelaviatiolap	X	FW	_	14	advcl	_	_
10	'	'	PUNCT	''	_	9	punct	_	_
11	then	then	ADV	RB	_	14	advmod	_	_
12	why	why	SCONJ	WRB	_	14	advmod	_	_
13	not	not	PART	RB	_	14	advmod	_	_
14	make	make	VERB	VB	_	0	root	_	_
15	the	the	DET	DT	_	16	det	_	_
16	word	word	NOUN	NN	_	14	iobj	_	_
17	Birds	bird	NOUN	NNS	_	16	appos	_	_
18	'	'	PUNCT	``	_	19	punct	_	_
19	Vogelaviatiolaps	Vogelaviatiolaps	X	FW	_	14	obj	_	_
20	'	'	PUNCT	''	_	19	punct	_	_
21	since	since	ADP	IN	_	23	case	_	_
22	the	the	DET	DT	_	23	det	_	_
23	suffix	suffix	SCONJ	NN	_	28	mark	_	_
24	'	'	PUNCT	``	_	25	punct	_	_
25	s	S	X	FW	_	23	appos	_	_
26	'	'	PUNCT	''	_	25	punct	_	_
27	is	be	AUX	VBZ	_	28	aux:pass	_	_
28	added	add	VERB	VBN	_	14	advcl	_	_
29	at	at	ADP	IN	_	31	case	_	_
30	the	the	DET	DT	_	31	det	_	_
31	end	end	NOUN	NN	_	28	obl	_	_
32	for	for	ADP	IN	_	34	case	_	_
33	most	most	ADJ	JJS	_	34	amod	_	_
34	languages	language	NOUN	NNS	_	28	obl	_	_
35	at	at	ADP	IN	_	36	case	_	_
36	plurals	plural	NOUN	NNS	_	28	obl	_	_
37	.	.	PUNCT	.	_	14	punct	_	_

# sent_id = GUM_whow_languages-12
# text = If you want to add complication , you can add genders like most European languages like French and German .
# s_type=sub
1	If	if	SCONJ	IN	_	3	mark	_	_
2	you	you	PRON	PRP	_	3	nsubj	_	_
3	want	want	VERB	VBP	_	10	advcl	_	_
4	to	to	PART	TO	_	5	mark	_	_
5	add	add	VERB	VB	_	3	xcomp	_	_
6	complication	complication	NOUN	NN	_	5	obj	_	_
7	,	,	PUNCT	,	_	3	punct	_	_
8	you	you	PRON	PRP	_	10	nsubj	_	_
9	can	can	AUX	MD	_	10	aux	_	_
10	add	add	VERB	VB	_	0	root	_	_
11	genders	gender	NOUN	NNS	_	10	obj	_	_
12	like	like	ADP	IN	_	15	case	_	_
13	most	most	ADJ	JJS	_	15	amod	_	_
14	European	European	ADJ	JJ	_	15	amod	_	_
15	languages	language	NOUN	NNS	_	11	nmod	_	_
16	like	like	ADP	IN	_	17	case	_	_
17	French	French	PROPN	NNP	_	15	nmod	_	_
18	and	and	CCONJ	CC	_	19	cc	_	_
19	German	German	PROPN	NNP	_	17	conj	_	_
20	.	.	PUNCT	.	_	10	punct	_	_

# sent_id = GUM_whow_languages-13
# text = For example , if you want the word ' horse ' to be a boy , you may want ' the horse ' to be ' Mat Fereder ' , but a ' cat ' to be a girl , you may want , ' the cat ' to be ' Fet Kamaow ' .
# s_type=sub
1	For	for	ADP	IN	_	2	case	_	_
2	example	example	NOUN	NN	_	19	obl	_	_
3	,	,	PUNCT	,	_	2	punct	_	_
4	if	if	SCONJ	IN	_	6	mark	_	_
5	you	you	PRON	PRP	_	6	nsubj	_	_
6	want	want	VERB	VBP	_	19	advcl	_	_
7	the	the	DET	DT	_	8	det	_	_
8	word	word	NOUN	NN	_	6	obj	_	_
9	'	'	PUNCT	``	_	10	punct	_	_
10	horse	horse	NOUN	NN	_	8	appos	_	_
11	'	'	PUNCT	''	_	10	punct	_	_
12	to	to	PART	TO	_	15	mark	_	_
13	be	be	AUX	VB	_	15	cop	_	_
14	a	a	DET	DT	_	15	det	_	_
15	boy	boy	NOUN	NN	_	6	xcomp	_	_
16	,	,	PUNCT	,	_	6	punct	_	_
17	you	you	PRON	PRP	_	19	nsubj	_	_
18	may	may	AUX	MD	_	19	aux	_	_
19	want	want	VERB	VB	_	0	root	_	_
20	'	'	PUNCT	``	_	22	punct	_	_
21	the	the	DET	DT	_	22	det	_	_
22	horse	horse	NOUN	NN	_	19	obj	_	_
23	'	'	PUNCT	''	_	22	punct	_	_
24	to	to	PART	TO	_	28	mark	_	_
25	be	be	AUX	VB	_	28	cop	_	_
26	'	'	PUNCT	``	_	28	punct	_	_
27	Mat	Mat	X	FW	_	28	det	_	_
28	Fereder	Fereder	X	FW	_	19	xcomp	_	_
29	'	'	PUNCT	''	_	28	punct	_	_
30	,	,	PUNCT	,	_	39	punct	_	_
31	but	but	CCONJ	CC	_	39	cc	_	_
32	a	a	DET	DT	_	34	det	_	_
33	'	'	PUNCT	``	_	34	punct	_	_
34	cat	cat	NOUN	NN	_	39	nsubj	_	_
35	'	'	PUNCT	''	_	34	punct	_	_
36	to	to	PART	TO	_	39	mark	_	_
37	be	be	AUX	VB	_	39	cop	_	_
38	a	a	DET	DT	_	39	det	_	_
39	girl	girl	NOUN	NN	_	28	conj	_	_
40	,	,	PUNCT	,	_	43	punct	_	_
41	you	you	PRON	PRP	_	43	nsubj	_	_
42	may	may	AUX	MD	_	43	aux	_	_
43	want	want	VERB	VB	_	19	conj	_	_
44	,	,	PUNCT	,	_	47	punct	_	_
45	'	'	PUNCT	``	_	47	punct	_	_
46	the	the	DET	DT	_	47	det	_	_
47	cat	cat	NOUN	NN	_	43	obj	_	_
48	'	'	PUNCT	''	_	47	punct	_	_
49	to	to	PART	TO	_	52	mark	_	_
50	be	be	AUX	VB	_	52	cop	_	_
51	'	'	PUNCT	``	_	52	punct	_	_
52	Fet	Fet	X	FW	_	43	xcomp	_	_
53	Kamaow	Kamaow	X	FW	_	52	flat	_	_
54	'	'	PUNCT	''	_	52	punct	_	_
55	.	.	PUNCT	.	_	19	punct	_	_

# sent_id = GUM_whow_languages-14
# text = Consider basing your language on an existing language .
# s_type=imp
1	Consider	consider	VERB	VB	_	0	root	_	_
2	basing	base	VERB	VBG	_	1	xcomp	_	_
3	your	your	PRON	PRP$	_	4	nmod:poss	_	_
4	language	language	NOUN	NN	_	2	obj	_	_
5	on	on	ADP	IN	_	8	case	_	_
6	an	an	DET	DT	_	8	det	_	_
7	existing	existing	ADJ	JJ	_	8	amod	_	_
8	language	language	NOUN	NN	_	2	obl	_	_
9	.	.	PUNCT	.	_	1	punct	_	_

# sent_id = GUM_whow_languages-15
# text = For example , in my made up language , ' Vogelaviatiolap ' means Bird .
# s_type=decl
1	For	for	ADP	IN	_	2	case	_	_
2	example	example	NOUN	NN	_	13	obl	_	_
3	,	,	PUNCT	,	_	2	punct	_	_
4	in	in	ADP	IN	_	8	case	_	_
5	my	my	PRON	PRP$	_	8	nmod:poss	_	_
6	made	make	VERB	VBN	_	8	acl	_	_
7	up	up	ADP	RP	_	6	compound:prt	_	_
8	language	language	NOUN	NN	_	13	obl	_	_
9	,	,	PUNCT	,	_	8	punct	_	_
10	'	'	PUNCT	``	_	11	punct	_	_
11	Vogelaviatiolap	Vogelaviatiolap	X	FW	_	13	nsubj	_	_
12	'	'	PUNCT	''	_	11	punct	_	_
13	means	mean	VERB	VBZ	_	0	root	_	_
14	Bird	Bird	NOUN	NN	_	13	obj	_	_
15	.	.	PUNCT	.	_	13	punct	_	_

# sent_id = GUM_whow_languages-16
# text = If you have n't guessed , it comes from the following :
# s_type=decl
1	If	if	SCONJ	IN	_	5	mark	_	_
2	you	you	PRON	PRP	_	5	nsubj	_	_
3	have	have	AUX	VBP	_	5	aux	_	_
4	n't	n't	PART	RB	_	5	advmod	_	_
5	guessed	guess	VERB	VBN	_	8	advcl	_	_
6	,	,	PUNCT	,	_	5	punct	_	_
7	it	it	PRON	PRP	_	8	nsubj	_	_
8	comes	come	VERB	VBZ	_	0	root	_	_
9	from	from	ADP	IN	_	10	case	_	_
10	the	the	PRON	DT	_	8	obl	_	_
11	following	follow	VERB	VBG	_	10	amod	_	_
12	:	:	PUNCT	:	_	8	punct	_	_

# sent_id = GUM_whow_languages-17
# text = ' Vogel ' comes from German , which means bird
# s_type=decl
1	'	'	PUNCT	``	_	2	punct	_	_
2	Vogel	Vogel	X	FW	_	4	nsubj	_	_
3	'	'	PUNCT	''	_	2	punct	_	_
4	comes	come	VERB	VBZ	_	0	root	_	_
5	from	from	ADP	IN	_	6	case	_	_
6	German	German	PROPN	NNP	_	4	obl	_	_
7	,	,	PUNCT	,	_	9	punct	_	_
8	which	which	PRON	WDT	_	9	nsubj	_	_
9	means	mean	VERB	VBZ	_	2	acl:relcl	_	_
10	bird	bird	NOUN	NN	_	9	obj	_	_

# sent_id = GUM_whow_languages-18
# text = ' aviatio ' comes from English .
# s_type=decl
1	'	'	PUNCT	``	_	2	punct	_	_
2	aviatio	aviatio	X	FW	_	4	nsubj	_	_
3	'	'	PUNCT	''	_	2	punct	_	_
4	comes	come	VERB	VBZ	_	0	root	_	_
5	from	from	ADP	IN	_	6	case	_	_
6	English	English	PROPN	NNP	_	4	obl	_	_
7	.	.	PUNCT	.	_	4	punct	_	_

# sent_id = GUM_whow_languages-19
# text = It 's uncompleted though , because the word is part of the term ' aviation '
# s_type=decl
1	It	it	PRON	PRP	_	3	nsubj	_	_
2	's	be	AUX	VBZ	_	3	cop	_	_
3	uncompleted	uncompleted	ADJ	JJ	_	0	root	_	_
4	though	though	ADV	RB	_	3	advmod	_	_
5	,	,	PUNCT	,	_	10	punct	_	_
6	because	because	SCONJ	IN	_	10	mark	_	_
7	the	the	DET	DT	_	8	det	_	_
8	word	word	NOUN	NN	_	10	nsubj	_	_
9	is	be	AUX	VBZ	_	10	cop	_	_
10	part	part	NOUN	NN	_	3	advcl	_	_
11	of	of	ADP	IN	_	13	case	_	_
12	the	the	DET	DT	_	13	det	_	_
13	term	term	NOUN	NN	_	10	nmod	_	_
14	'	'	PUNCT	``	_	15	punct	_	_
15	aviation	aviation	NOUN	NN	_	13	appos	_	_
16	'	'	PUNCT	''	_	15	punct	_	_

# sent_id = GUM_whow_languages-20
# text = ' lap ' comes from Onomatopoeia .
# s_type=decl
1	'	'	PUNCT	``	_	2	punct	_	_
2	lap	lap	X	FW	_	4	nsubj	_	_
3	'	'	PUNCT	''	_	2	punct	_	_
4	comes	come	VERB	VBZ	_	0	root	_	_
5	from	from	ADP	IN	_	6	case	_	_
6	Onomatopoeia	onomatopoeia	NOUN	NN	_	4	obl	_	_
7	.	.	PUNCT	.	_	4	punct	_	_

# sent_id = GUM_whow_languages-21
# text = It 's a completed term , but it is supposed to come from ' Flap ! '
# s_type=decl
1	It	it	PRON	PRP	_	5	nsubj	_	_
2	's	be	AUX	VBZ	_	5	cop	_	_
3	a	a	DET	DT	_	5	det	_	_
4	completed	complete	VERB	VBN	_	5	amod	_	_
5	term	term	NOUN	NN	_	0	root	_	_
6	,	,	PUNCT	,	_	10	punct	_	_
7	but	but	CCONJ	CC	_	10	cc	_	_
8	it	it	PRON	PRP	_	10	nsubj:pass	_	_
9	is	be	AUX	VBZ	_	10	aux:pass	_	_
10	supposed	suppose	VERB	VBN	_	5	conj	_	_
11	to	to	PART	TO	_	12	mark	_	_
12	come	come	VERB	VB	_	10	xcomp	_	_
13	from	from	ADP	IN	_	15	case	_	_
14	'	'	PUNCT	``	_	15	punct	_	_
15	Flap	flap	NOUN	NN	_	12	obl	_	_
16	!	!	PUNCT	.	_	15	punct	_	_
17	'	'	PUNCT	''	_	15	punct	_	_

# sent_id = GUM_whow_languages-22
# text = Consider basing some of your words from other words you have invented .
# s_type=imp
1	Consider	consider	VERB	VB	_	0	root	_	_
2	basing	base	VERB	VBG	_	1	xcomp	_	_
3	some	some	PRON	DT	_	2	obj	_	_
4	of	of	ADP	IN	_	6	case	_	_
5	your	your	PRON	PRP$	_	6	nmod:poss	_	_
6	words	word	NOUN	NNS	_	3	nmod	_	_
7	from	from	ADP	IN	_	9	case	_	_
8	other	other	ADJ	JJ	_	9	amod	_	_
9	words	word	NOUN	NNS	_	2	obl	_	_
10	you	you	PRON	PRP	_	12	nsubj	_	_
11	have	have	AUX	VBP	_	12	aux	_	_
12	invented	invent	VERB	VBN	_	9	ccomp	_	_
13	.	.	PUNCT	.	_	1	punct	_	_

# sent_id = GUM_whow_languages-23
# text = For example , if you invented the word ' China ' as ' Khinssa ' , ' Drink ' as ' Bever ' , and the word ' Accident ' as ' Casnondelibreaten ' , why not make the word ' tea ' as ' Khincasnonbever ' or ' Bevernondelibreatekin ' or even ' Khinssacasnondelibreatenibever ' !
# s_type=wh
1	For	for	ADP	IN	_	2	case	_	_
2	example	example	NOUN	NN	_	38	obl	_	_
3	,	,	PUNCT	,	_	2	punct	_	_
4	if	if	SCONJ	IN	_	6	mark	_	_
5	you	you	PRON	PRP	_	6	nsubj	_	_
6	invented	invent	VERB	VBD	_	38	advcl	_	_
7	the	the	DET	DT	_	8	det	_	_
8	word	word	NOUN	NN	_	6	obj	_	_
9	'	'	PUNCT	``	_	10	punct	_	_
10	China	China	PROPN	NNP	_	8	appos	_	_
11	'	'	PUNCT	''	_	10	punct	_	_
12	as	as	ADP	IN	_	14	case	_	_
13	'	'	PUNCT	``	_	14	punct	_	_
14	Khinssa	Khinssa	X	FW	_	6	obl	_	_
15	'	'	PUNCT	''	_	14	punct	_	_
16	,	,	PUNCT	,	_	18	punct	_	_
17	'	'	PUNCT	``	_	18	punct	_	_
18	Drink	drink	VERB	VB	_	8	conj	_	_
19	'	'	PUNCT	''	_	18	punct	_	_
20	as	as	ADP	IN	_	22	case	_	_
21	'	'	PUNCT	``	_	22	punct	_	_
22	Bever	Bever	X	FW	_	6	obl	_	_
23	'	'	PUNCT	''	_	22	punct	_	_
24	,	,	PUNCT	,	_	27	punct	_	_
25	and	and	CCONJ	CC	_	27	cc	_	_
26	the	the	DET	DT	_	27	det	_	_
27	word	word	NOUN	NN	_	8	conj	_	_
28	'	'	PUNCT	``	_	29	punct	_	_
29	Accident	Accident	NOUN	NN	_	27	appos	_	_
30	'	'	PUNCT	''	_	29	punct	_	_
31	as	as	ADP	IN	_	33	case	_	_
32	'	'	PUNCT	``	_	33	punct	_	_
33	Casnondelibreaten	Casnondelibreaten	X	FW	_	6	obl	_	_
34	'	'	PUNCT	''	_	33	punct	_	_
35	,	,	PUNCT	,	_	6	punct	_	_
36	why	why	SCONJ	WRB	_	38	advmod	_	_
37	not	not	PART	RB	_	38	advmod	_	_
38	make	make	VERB	VB	_	0	root	_	_
39	the	the	DET	DT	_	40	det	_	_
40	word	word	NOUN	NN	_	38	obj	_	_
41	'	'	PUNCT	``	_	42	punct	_	_
42	tea	tea	NOUN	NN	_	40	appos	_	_
43	'	'	PUNCT	''	_	42	punct	_	_
44	as	as	ADP	IN	_	46	case	_	_
45	'	'	PUNCT	``	_	46	punct	_	_
46	Khincasnonbever	Khincasnonbever	X	FW	_	38	obl	_	_
47	'	'	PUNCT	''	_	46	punct	_	_
48	or	or	CCONJ	CC	_	50	cc	_	_
49	'	'	PUNCT	``	_	50	punct	_	_
50	Bevernondelibreatekin	Bevernondelibreatekin	X	FW	_	46	conj	_	_
51	'	'	PUNCT	''	_	50	punct	_	_
52	or	or	CCONJ	CC	_	55	cc	_	_
53	even	even	ADV	RB	_	38	advmod	_	_
54	'	'	PUNCT	``	_	55	punct	_	_
55	Khinssacasnondelibreatenibever	Khinssacasnondelibreatenibever	X	FW	_	46	conj	_	_
56	'	'	PUNCT	''	_	55	punct	_	_
57	!	!	PUNCT	.	_	38	punct	_	_

# sent_id = GUM_whow_languages-24
# text = Get inspiration from existing alphabets and words .
# s_type=imp
1	Get	get	VERB	VB	_	0	root	_	_
2	inspiration	inspiration	NOUN	NN	_	1	obj	_	_
3	from	from	ADP	IN	_	5	case	_	_
4	existing	exist	VERB	VBG	_	5	amod	_	_
5	alphabets	alphabet	NOUN	NNS	_	2	nmod	_	_
6	and	and	CCONJ	CC	_	7	cc	_	_
7	words	word	NOUN	NNS	_	5	conj	_	_
8	.	.	PUNCT	.	_	1	punct	_	_

# sent_id = GUM_whow_languages-25
# text = Why not add some non Latin Characters such as ß ?
# s_type=wh
1	Why	why	SCONJ	WRB	_	3	advmod	_	_
2	not	not	PART	RB	_	3	advmod	_	_
3	add	add	VERB	VB	_	0	root	_	_
4	some	some	DET	DT	_	7	det	_	_
5	non	non	ADV	RB	_	6	advmod	_	_
6	Latin	Latin	ADJ	JJ	_	7	amod	_	_
7	Characters	character	NOUN	NNS	_	3	obj	_	_
8	such	such	ADJ	JJ	_	7	amod	_	_
9	as	as	ADP	IN	_	10	case	_	_
10	ß	ß	SYM	SYM	_	8	obl	_	_
11	?	?	PUNCT	.	_	3	punct	_	_

# sent_id = GUM_whow_languages-26
# text = You can even make the whole language not based on the Latin Alphabet at all like Chinese !
# s_type=sub
1	You	you	PRON	PRP	_	4	nsubj	_	_
2	can	can	AUX	MD	_	4	aux	_	_
3	even	even	ADV	RB	_	4	advmod	_	_
4	make	make	VERB	VB	_	0	root	_	_
5	the	the	DET	DT	_	7	det	_	_
6	whole	whole	ADJ	JJ	_	7	amod	_	_
7	language	language	NOUN	NN	_	4	obj	_	_
8	not	not	PART	RB	_	9	advmod	_	_
9	based	base	VERB	VBN	_	4	xcomp	_	_
10	on	on	ADP	IN	_	13	case	_	_
11	the	the	DET	DT	_	13	det	_	_
12	Latin	Latin	ADJ	JJ	_	13	amod	_	_
13	Alphabet	alphabet	NOUN	NN	_	9	obl	_	_
14	at	at	ADP	IN	_	15	case	_	_
15	all	all	PRON	DT	_	9	obl	_	_
16	like	like	ADP	IN	_	17	case	_	_
17	Chinese	Chinese	PROPN	NNP	_	7	nmod	_	_
18	!	!	PUNCT	.	_	4	punct	_	_

# sent_id = GUM_whow_languages-27
# text = You can even take some words of languages , altering them or not .
# s_type=sub
1	You	you	PRON	PRP	_	4	nsubj	_	_
2	can	can	AUX	MD	_	4	aux	_	_
3	even	even	ADV	RB	_	4	advmod	_	_
4	take	take	VERB	VB	_	0	root	_	_
5	some	some	DET	DT	_	6	det	_	_
6	words	word	NOUN	NNS	_	4	obj	_	_
7	of	of	ADP	IN	_	8	case	_	_
8	languages	language	NOUN	NNS	_	6	nmod	_	_
9	,	,	PUNCT	,	_	10	punct	_	_
10	altering	alter	VERB	VBG	_	4	advcl	_	_
11	them	them	PRON	PRP	_	10	obj	_	_
12	or	or	CCONJ	CC	_	13	cc	_	_
13	not	not	PART	RB	_	10	conj	_	_
14	.	.	PUNCT	.	_	4	punct	_	_

# sent_id = GUM_whow_languages-28
# text = You can make the word ' pen ' as ' penn ' or even ' pen ' .
# s_type=sub
1	You	you	PRON	PRP	_	3	nsubj	_	_
2	can	can	AUX	MD	_	3	aux	_	_
3	make	make	VERB	VB	_	0	root	_	_
4	the	the	DET	DT	_	5	det	_	_
5	word	word	NOUN	NN	_	3	obj	_	_
6	'	'	PUNCT	``	_	7	punct	_	_
7	pen	pen	NOUN	NN	_	5	appos	_	_
8	'	'	PUNCT	''	_	7	punct	_	_
9	as	as	ADP	IN	_	11	case	_	_
10	'	'	PUNCT	``	_	11	punct	_	_
11	penn	Penn	X	FW	_	3	obl	_	_
12	'	'	PUNCT	''	_	11	punct	_	_
13	or	or	CCONJ	CC	_	16	cc	_	_
14	even	even	ADV	RB	_	3	advmod	_	_
15	'	'	PUNCT	``	_	16	punct	_	_
16	pen	pen	NOUN	NN	_	11	conj	_	_
17	'	'	PUNCT	''	_	16	punct	_	_
18	.	.	PUNCT	.	_	3	punct	_	_

# sent_id = GUM_whow_languages-29
# text = Using the dictionary can ensure you not missing a single word .
# s_type=sub
1	Using	use	VERB	VBG	_	5	csubj	_	_
2	the	the	DET	DT	_	3	det	_	_
3	dictionary	dictionary	NOUN	NN	_	1	obj	_	_
4	can	can	AUX	MD	_	5	aux	_	_
5	ensure	ensure	VERB	VB	_	0	root	_	_
6	you	you	PRON	PRP	_	8	nsubj	_	_
7	not	not	PART	RB	_	8	advmod	_	_
8	missing	miss	VERB	VBG	_	5	ccomp	_	_
9	a	a	DET	DT	_	11	det	_	_
10	single	single	ADJ	JJ	_	11	amod	_	_
11	word	word	NOUN	NN	_	8	obj	_	_
12	.	.	PUNCT	.	_	5	punct	_	_

# sent_id = GUM_whow_languages-30
# text = Keep track of all your
# s_type=imp
1	Keep	keep	VERB	VB	_	0	root	_	_
2	track	track	NOUN	NN	_	1	obj	_	_
3	of	of	ADP	IN	_	5	case	_	_
4	all	all	DET	PDT	_	5	det	_	_
5	your	your	PRON	PRP$	_	2	nmod	_	_

# sent_id = GUM_whow_languages-31
# text = Remember to write down your creations !
# s_type=imp
1	Remember	remember	VERB	VB	_	0	root	_	_
2	to	to	PART	TO	_	3	mark	_	_
3	write	write	VERB	VB	_	1	xcomp	_	_
4	down	down	ADP	RP	_	3	compound:prt	_	_
5	your	your	PRON	PRP$	_	6	nmod:poss	_	_
6	creations	creation	NOUN	NNS	_	3	obj	_	_
7	!	!	PUNCT	.	_	1	punct	_	_

# sent_id = GUM_whow_languages-32
# text = Use your language .
# s_type=imp
1	Use	use	VERB	VB	_	0	root	_	_
2	your	your	PRON	PRP$	_	3	nmod:poss	_	_
3	language	language	NOUN	NN	_	1	obj	_	_
4	.	.	PUNCT	.	_	1	punct	_	_

# sent_id = GUM_whow_languages-33
# text = Get used to using it yourself , and spread it to others .
# s_type=imp
1	Get	get	AUX	VB	_	2	aux:pass	_	_
2	used	use	VERB	VBN	_	0	root	_	_
3	to	to	PART	TO	_	4	mark	_	_
4	using	use	VERB	VBG	_	2	advcl	_	_
5	it	it	PRON	PRP	_	4	obj	_	_
6	yourself	PRP	PRON	PRP	_	4	nmod:npmod	_	_
7	,	,	PUNCT	,	_	9	punct	_	_
8	and	and	CCONJ	CC	_	9	cc	_	_
9	spread	spread	VERB	VB	_	2	conj	_	_
10	it	it	PRON	PRP	_	9	obj	_	_
11	to	to	ADP	TO	_	12	case	_	_
12	others	other	NOUN	NNS	_	9	obl	_	_
13	.	.	PUNCT	.	_	2	punct	_	_

# sent_id = GUM_whow_languages-34
# text = Once you feel confident about your language , experiment and expand :
# s_type=imp
1	Once	once	SCONJ	IN	_	3	mark	_	_
2	you	you	PRON	PRP	_	3	nsubj	_	_
3	feel	feel	VERB	VBP	_	9	advcl	_	_
4	confident	confident	ADJ	JJ	_	3	xcomp	_	_
5	about	about	ADP	IN	_	7	case	_	_
6	your	your	PRON	PRP$	_	7	nmod:poss	_	_
7	language	language	NOUN	NN	_	4	obl	_	_
8	,	,	PUNCT	,	_	3	punct	_	_
9	experiment	experiment	VERB	VB	_	0	root	_	_
10	and	and	CCONJ	CC	_	11	cc	_	_
11	expand	expand	VERB	VB	_	9	conj	_	_
12	:	:	PUNCT	:	_	9	punct	_	_

# sent_id = GUM_whow_languages-35
# text = Grab a book / novel and translate it to your own language .
# s_type=imp
1	Grab	grab	VERB	VB	_	0	root	_	_
2	a	a	DET	DT	_	3	det	_	_
3	book	book	NOUN	NN	_	1	obj	_	_
4	/	/	PUNCT	SYM	_	5	punct	_	_
5	novel	novel	NOUN	NN	_	3	conj	_	_
6	and	and	CCONJ	CC	_	7	cc	_	_
7	translate	translate	VERB	VB	_	1	conj	_	_
8	it	it	PRON	PRP	_	7	obj	_	_
9	to	to	ADP	TO	_	12	case	_	_
10	your	your	PRON	PRP$	_	12	nmod:poss	_	_
11	own	own	ADJ	JJ	_	12	amod	_	_
12	language	language	NOUN	NN	_	7	obl	_	_
13	.	.	PUNCT	.	_	1	punct	_	_

# sent_id = GUM_whow_languages-36
# text = Teach your friends this new language .
# s_type=imp
1	Teach	teach	VERB	VB	_	0	root	_	_
2	your	your	PRON	PRP$	_	3	nmod:poss	_	_
3	friends	friend	NOUN	NNS	_	1	iobj	_	_
4	this	this	DET	DT	_	6	det	_	_
5	new	new	ADJ	JJ	_	6	amod	_	_
6	language	language	NOUN	NN	_	1	obj	_	_
7	.	.	PUNCT	.	_	1	punct	_	_

# sent_id = GUM_whow_languages-37
# text = As soon as your friends understand your language , communicate to them with it .
# s_type=imp
1	As	as	ADV	RB	_	2	advmod	_	_
2	soon	soon	ADV	RB	_	6	advmod	_	_
3	as	as	SCONJ	IN	_	6	mark	_	_
4	your	your	PRON	PRP$	_	5	nmod:poss	_	_
5	friends	friend	NOUN	NNS	_	6	nsubj	_	_
6	understand	understand	VERB	VBP	_	10	advcl	_	_
7	your	your	PRON	PRP$	_	8	nmod:poss	_	_
8	language	language	NOUN	NN	_	6	obj	_	_
9	,	,	PUNCT	,	_	6	punct	_	_
10	communicate	communicate	VERB	VB	_	0	root	_	_
11	to	to	ADP	TO	_	12	case	_	_
12	them	them	PRON	PRP	_	10	obl	_	_
13	with	with	ADP	IN	_	14	case	_	_
14	it	it	PRON	PRP	_	10	obl	_	_
15	.	.	PUNCT	.	_	10	punct	_	_

# sent_id = GUM_whow_languages-38
# text = Be fluent in your own made up language and start spreading this to your friends , family and strangers !
# s_type=imp
1	Be	be	AUX	VB	_	2	cop	_	_
2	fluent	fluent	ADJ	JJ	_	0	root	_	_
3	in	in	ADP	IN	_	8	case	_	_
4	your	your	PRON	PRP$	_	8	nmod:poss	_	_
5	own	own	ADJ	JJ	_	8	amod	_	_
6	made	make	VERB	VBN	_	8	acl	_	_
7	up	up	ADP	RP	_	6	compound:prt	_	_
8	language	language	NOUN	NN	_	2	obl	_	_
9	and	and	CCONJ	CC	_	10	cc	_	_
10	start	start	VERB	VB	_	2	conj	_	_
11	spreading	spread	VERB	VBG	_	10	xcomp	_	_
12	this	this	PRON	DT	_	11	obj	_	_
13	to	to	ADP	TO	_	15	case	_	_
14	your	your	PRON	PRP$	_	15	nmod:poss	_	_
15	friends	friend	NOUN	NNS	_	11	obl	_	_
16	,	,	PUNCT	,	_	17	punct	_	_
17	family	family	NOUN	NN	_	15	conj	_	_
18	and	and	CCONJ	CC	_	19	cc	_	_
19	strangers	stranger	NOUN	NNS	_	15	conj	_	_
20	!	!	PUNCT	.	_	2	punct	_	_

# sent_id = GUM_whow_languages-39
# text = Write your own poem / novel / story with your own made up language .
# s_type=imp
1	Write	write	VERB	VB	_	0	root	_	_
2	your	your	PRON	PRP$	_	4	nmod:poss	_	_
3	own	own	ADJ	JJ	_	4	amod	_	_
4	poem	poem	NOUN	NN	_	1	obj	_	_
5	/	/	PUNCT	SYM	_	6	punct	_	_
6	novel	novel	NOUN	NN	_	4	conj	_	_
7	/	/	PUNCT	SYM	_	8	punct	_	_
8	story	story	NOUN	NN	_	4	conj	_	_
9	with	with	ADP	IN	_	14	case	_	_
10	your	your	PRON	PRP$	_	14	nmod:poss	_	_
11	own	own	ADJ	JJ	_	14	amod	_	_
12	made	make	VERB	VBN	_	14	acl	_	_
13	up	up	ADP	RP	_	12	compound:prt	_	_
14	language	language	NOUN	NN	_	8	nmod	_	_
15	.	.	PUNCT	.	_	1	punct	_	_

# sent_id = GUM_whow_languages-40
# text = If you 're really ambitious , set a goal of helping others become fluent in the language .
# s_type=imp
1	If	if	SCONJ	IN	_	5	mark	_	_
2	you	you	PRON	PRP	_	5	nsubj	_	_
3	're	be	AUX	VBP	_	5	cop	_	_
4	really	really	ADV	RB	_	5	advmod	_	_
5	ambitious	ambitious	ADJ	JJ	_	7	advcl	_	_
6	,	,	PUNCT	,	_	5	punct	_	_
7	set	set	VERB	VB	_	0	root	_	_
8	a	a	DET	DT	_	9	det	_	_
9	goal	goal	NOUN	NN	_	7	obj	_	_
10	of	of	SCONJ	IN	_	11	mark	_	_
11	helping	help	VERB	VBG	_	9	acl	_	_
12	others	other	NOUN	NNS	_	13	nsubj	_	_
13	become	become	VERB	VB	_	11	ccomp	_	_
14	fluent	fluent	ADJ	JJ	_	13	xcomp	_	_
15	in	in	ADP	IN	_	17	case	_	_
16	the	the	DET	DT	_	17	det	_	_
17	language	language	NOUN	NN	_	14	obl	_	_
18	.	.	PUNCT	.	_	7	punct	_	_

# sent_id = GUM_whow_languages-41
# text = One day , maybe you can make it the official language of a country !
# s_type=sub
1	One	One	NUM	CD	_	2	nummod	_	_
2	day	day	NOUN	NN	_	7	nmod:tmod	_	_
3	,	,	PUNCT	,	_	2	punct	_	_
4	maybe	maybe	ADV	RB	_	7	advmod	_	_
5	you	you	PRON	PRP	_	7	nsubj	_	_
6	can	can	AUX	MD	_	7	aux	_	_
7	make	make	VERB	VB	_	0	root	_	_
8	it	it	PRON	PRP	_	7	obj	_	_
9	the	the	DET	DT	_	11	det	_	_
10	official	official	ADJ	JJ	_	11	amod	_	_
11	language	language	NOUN	NN	_	7	xcomp	_	_
12	of	of	ADP	IN	_	14	case	_	_
13	a	a	DET	DT	_	14	det	_	_
14	country	country	NOUN	NN	_	11	nmod	_	_
15	!	!	PUNCT	.	_	7	punct	_	_

# sent_id = GUM_whow_languages-42
# text = Tips
# s_type=frag
1	Tips	tip	NOUN	NNS	_	0	root	_	_

# sent_id = GUM_whow_languages-43
# text = Make sure that it is a language that while speaking , you do n't get a literal knot in your tongue !
# s_type=imp
1	Make	make	VERB	VB	_	0	root	_	_
2	sure	sure	ADP	RP	_	1	compound:prt	_	_
3	that	that	SCONJ	IN	_	7	mark	_	_
4	it	it	PRON	PRP	_	7	nsubj	_	_
5	is	be	AUX	VBZ	_	7	cop	_	_
6	a	a	DET	DT	_	7	det	_	_
7	language	language	NOUN	NN	_	1	ccomp	_	_
8	that	that	PRON	WDT	_	15	obj	_	_
9	while	while	SCONJ	IN	_	10	mark	_	_
10	speaking	speak	VERB	VBG	_	15	advcl	_	_
11	,	,	PUNCT	,	_	10	punct	_	_
12	you	you	PRON	PRP	_	15	nsubj	_	_
13	do	do	AUX	VBP	_	15	aux	_	_
14	n't	n't	PART	RB	_	15	advmod	_	_
15	get	get	VERB	VB	_	7	acl:relcl	_	_
16	a	a	DET	DT	_	18	det	_	_
17	literal	literal	ADJ	JJ	_	18	amod	_	_
18	knot	knot	NOUN	NN	_	15	obj	_	_
19	in	in	ADP	IN	_	21	case	_	_
20	your	your	PRON	PRP$	_	21	nmod:poss	_	_
21	tongue	tongue	NOUN	NN	_	15	obl	_	_
22	!	!	PUNCT	.	_	1	punct	_	_

# sent_id = GUM_whow_languages-44
# text = Remember you should know how to write it .
# s_type=imp
1	Remember	remember	VERB	VB	_	0	root	_	_
2	you	you	PRON	PRP	_	4	nsubj	_	_
3	should	should	AUX	MD	_	4	aux	_	_
4	know	know	VERB	VB	_	1	ccomp	_	_
5	how	how	SCONJ	WRB	_	7	advmod	_	_
6	to	to	PART	TO	_	7	mark	_	_
7	write	write	VERB	VB	_	4	xcomp	_	_
8	it	it	PRON	PRP	_	7	obj	_	_
9	.	.	PUNCT	.	_	1	punct	_	_

# sent_id = GUM_whow_languages-45
# text = For example we write it from left to right , in Arabic it 's right to left , Chinese is in columns , and so on .
# s_type=decl
1	For	for	ADP	IN	_	2	case	_	_
2	example	example	NOUN	NN	_	4	obl	_	_
3	we	we	PRON	PRP	_	4	nsubj	_	_
4	write	write	VERB	VBP	_	0	root	_	_
5	it	it	PRON	PRP	_	4	obj	_	_
6	from	from	ADP	IN	_	7	case	_	_
7	left	left	NOUN	NN	_	4	obl	_	_
8	to	to	ADP	TO	_	9	case	_	_
9	right	right	NOUN	NN	_	4	obl	_	_
10	,	,	PUNCT	,	_	15	punct	_	_
11	in	in	ADP	IN	_	12	case	_	_
12	Arabic	Arabic	PROPN	NNP	_	15	nmod	_	_
13	it	it	PRON	PRP	_	15	nsubj	_	_
14	's	be	AUX	VBZ	_	15	cop	_	_
15	right	right	NOUN	NN	_	4	conj	_	_
16	to	to	ADP	TO	_	17	case	_	_
17	left	left	NOUN	NN	_	15	nmod	_	_
18	,	,	PUNCT	,	_	20	punct	_	_
19	Chinese	Chinese	PROPN	NNP	_	20	nsubj	_	_
20	is	be	VERB	VBZ	_	4	conj	_	_
21	in	in	ADP	IN	_	22	case	_	_
22	columns	column	NOUN	NNS	_	20	obl	_	_
23	,	,	PUNCT	,	_	25	punct	_	_
24	and	and	CCONJ	CC	_	25	cc	_	_
25	so	so	ADV	RB	_	4	conj	_	_
26	on	on	ADV	RB	_	25	fixed	_	_
27	.	.	PUNCT	.	_	4	punct	_	_

# sent_id = GUM_whow_languages-46
# text = Make sure that you and your friend(s) all follow a systematic language system .
# s_type=imp
1	Make	make	VERB	VB	_	0	root	_	_
2	sure	sure	ADP	RP	_	1	compound:prt	_	_
3	that	that	SCONJ	IN	_	9	mark	_	_
4	you	you	PRON	PRP	_	9	nsubj	_	_
5	and	and	CCONJ	CC	_	7	cc	_	_
6	your	your	PRON	PRP$	_	7	nmod:poss	_	_
7	friend(s)	friend	NOUN	NNS	_	4	conj	_	_
8	all	all	ADV	RB	_	9	advmod	_	_
9	follow	follow	VERB	VB	_	1	ccomp	_	_
10	a	a	DET	DT	_	13	det	_	_
11	systematic	systematic	ADJ	JJ	_	13	amod	_	_
12	language	language	NOUN	NN	_	13	compound	_	_
13	system	system	NOUN	NN	_	9	obj	_	_
14	.	.	PUNCT	.	_	1	punct	_	_

# sent_id = GUM_whow_languages-47
# text = In other words , make sure that you follow the same guidelines .
# s_type=imp
1	In	in	ADP	IN	_	3	case	_	_
2	other	other	ADJ	JJ	_	3	amod	_	_
3	words	word	NOUN	NNS	_	5	obl	_	_
4	,	,	PUNCT	,	_	3	punct	_	_
5	make	make	VERB	VB	_	0	root	_	_
6	sure	sure	ADP	RP	_	5	compound:prt	_	_
7	that	that	SCONJ	IN	_	9	mark	_	_
8	you	you	PRON	PRP	_	9	nsubj	_	_
9	follow	follow	VERB	VBP	_	5	ccomp	_	_
10	the	the	DET	DT	_	12	det	_	_
11	same	same	ADJ	JJ	_	12	amod	_	_
12	guidelines	guideline	NOUN	NNS	_	9	obj	_	_
13	.	.	PUNCT	.	_	5	punct	_	_

# sent_id = GUM_whow_languages-48
# text = Do n't use random letters .
# s_type=imp
1	Do	do	AUX	VB	_	3	aux	_	_
2	n't	n't	PART	RB	_	3	advmod	_	_
3	use	use	VERB	VB	_	0	root	_	_
4	random	random	ADJ	JJ	_	5	amod	_	_
5	letters	letter	NOUN	NNS	_	3	obj	_	_
6	.	.	PUNCT	.	_	3	punct	_	_

# sent_id = GUM_whow_languages-49
# text = It should make some sense , so that it will be easier to learn and speak with [ Example : Do n't use oh as e , hello as llo , and See ya as c yah ) .
# s_type=sub
1	It	it	PRON	PRP	_	3	nsubj	_	_
2	should	should	AUX	MD	_	3	aux	_	_
3	make	make	VERB	VB	_	0	root	_	_
4	some	some	DET	DT	_	5	det	_	_
5	sense	sense	NOUN	NN	_	3	obj	_	_
6	,	,	PUNCT	,	_	12	punct	_	_
7	so	so	SCONJ	RB	_	12	mark	_	_
8	that	that	SCONJ	IN	_	12	mark	_	_
9	it	it	PRON	PRP	_	12	nsubj	_	_
10	will	will	AUX	MD	_	12	aux	_	_
11	be	be	AUX	VB	_	12	cop	_	_
12	easier	easy	ADJ	JJR	_	3	advcl	_	_
13	to	to	PART	TO	_	14	mark	_	_
14	learn	learn	VERB	VB	_	12	xcomp	_	_
15	and	and	CCONJ	CC	_	16	cc	_	_
16	speak	speak	VERB	VB	_	14	conj	_	_
17	with	with	ADP	IN	_	16	compound:prt	_	_
18	[	[	PUNCT	-LSB-	_	19	punct	_	_
19	Example	example	NOUN	NN	_	3	dep	_	_
20	:	:	PUNCT	:	_	23	punct	_	_
21	Do	do	AUX	VB	_	23	aux	_	_
22	n't	n't	PART	RB	_	23	advmod	_	_
23	use	use	VERB	VB	_	19	dep	_	_
24	oh	oh	INTJ	UH	_	23	obj	_	_
25	as	as	ADP	IN	_	26	case	_	_
26	e	e	X	FW	_	24	nmod	_	_
27	,	,	PUNCT	,	_	28	punct	_	_
28	hello	hello	INTJ	UH	_	24	conj	_	_
29	as	as	ADP	IN	_	30	case	_	_
30	llo	llo	X	FW	_	28	nmod	_	_
31	,	,	PUNCT	,	_	33	punct	_	_
32	and	and	CCONJ	CC	_	33	cc	_	_
33	See	see	VERB	VB	_	24	conj	_	_
34	ya	ya	VERB	VBN	_	33	fixed	_	_
35	as	as	ADV	RB	_	36	case	_	_
36	c	c	X	FW	_	34	obl	_	_
37	yah	yah	X	FW	_	36	fixed	_	_
38	)	)	PUNCT	-RRB-	_	3	punct	_	_
39	.	.	PUNCT	.	_	3	punct	_	_

# sent_id = GUM_whow_languages-50
# text = Make sure you practice saying and spelling out many basic words in your language , English examples : is , who , when , of , why , if , what , where , can , may , etc .
# s_type=imp
1	Make	make	VERB	VB	_	0	root	_	_
2	sure	sure	ADP	RP	_	1	compound:prt	_	_
3	you	you	PRON	PRP	_	1	obj	_	_
4	practice	practice	VERB	VB	_	1	dep	_	_
5	saying	say	VERB	VBG	_	4	ccomp	_	_
6	and	and	CCONJ	CC	_	7	cc	_	_
7	spelling	spell	VERB	VBG	_	5	conj	_	_
8	out	out	ADP	RP	_	7	compound:prt	_	_
9	many	many	ADJ	JJ	_	11	amod	_	_
10	basic	basic	ADJ	JJ	_	11	amod	_	_
11	words	word	NOUN	NNS	_	7	obj	_	_
12	in	in	ADP	IN	_	14	case	_	_
13	your	your	PRON	PRP$	_	14	nmod:poss	_	_
14	language	language	NOUN	NN	_	7	obl	_	_
15	,	,	PUNCT	,	_	17	punct	_	_
16	English	English	ADJ	JJ	_	17	amod	_	_
17	examples	example	NOUN	NNS	_	4	dep	_	_
18	:	:	PUNCT	:	_	19	punct	_	_
19	is	be	VERB	VBZ	_	17	parataxis	_	_
20	,	,	PUNCT	,	_	21	punct	_	_
21	who	who	PRON	WP	_	19	conj	_	_
22	,	,	PUNCT	,	_	23	punct	_	_
23	when	when	SCONJ	WRB	_	19	conj	_	_
24	,	,	PUNCT	,	_	25	punct	_	_
25	of	of	ADP	IN	_	19	conj	_	_
26	,	,	PUNCT	,	_	27	punct	_	_
27	why	why	SCONJ	WRB	_	19	conj	_	_
28	,	,	PUNCT	,	_	29	punct	_	_
29	if	if	ADP	IN	_	19	conj	_	_
30	,	,	PUNCT	,	_	31	punct	_	_
31	what	what	PRON	WP	_	19	conj	_	_
32	,	,	PUNCT	,	_	33	punct	_	_
33	where	where	SCONJ	WRB	_	19	conj	_	_
34	,	,	PUNCT	,	_	35	punct	_	_
35	can	can	AUX	MD	_	19	conj	_	_
36	,	,	PUNCT	,	_	37	punct	_	_
37	may	may	AUX	MD	_	19	conj	_	_
38	,	,	PUNCT	,	_	39	punct	_	_
39	etc	etc	X	FW	_	19	conj	_	_
40	.	.	PUNCT	.	_	1	punct	_	_

# sent_id = GUM_whow_languages-51
# text = When starting off , follow closely to a language you like .
# s_type=imp
1	When	when	SCONJ	WRB	_	2	advmod	_	_
2	starting	start	VERB	VBG	_	5	advcl	_	_
3	off	off	ADP	RP	_	2	compound:prt	_	_
4	,	,	PUNCT	,	_	2	punct	_	_
5	follow	follow	VERB	VB	_	0	root	_	_
6	closely	closely	ADV	RB	_	5	advmod	_	_
7	to	to	ADP	TO	_	9	case	_	_
8	a	a	DET	DT	_	9	det	_	_
9	language	language	NOUN	NN	_	5	obl	_	_
10	you	you	PRON	PRP	_	11	nsubj	_	_
11	like	like	VERB	VBP	_	9	ccomp	_	_
12	.	.	PUNCT	.	_	5	punct	_	_

# sent_id = GUM_whow_languages-52
# text = This will make grammar much easier to make .
# s_type=decl
1	This	this	PRON	DT	_	3	nsubj	_	_
2	will	will	AUX	MD	_	3	aux	_	_
3	make	make	VERB	VB	_	0	root	_	_
4	grammar	grammar	NOUN	NN	_	3	obj	_	_
5	much	much	ADV	RB	_	6	advmod	_	_
6	easier	easy	ADJ	JJR	_	3	xcomp	_	_
7	to	to	PART	TO	_	8	mark	_	_
8	make	make	VERB	VB	_	6	acl	_	_
9	.	.	PUNCT	.	_	3	punct	_	_

# sent_id = GUM_whow_languages-53
# text = You must avoid simply copying the grammar rules , however , as this would technically turn your language into a code .
# s_type=sub
1	You	you	PRON	PRP	_	3	nsubj	_	_
2	must	must	AUX	MD	_	3	aux	_	_
3	avoid	avoid	VERB	VB	_	0	root	_	_
4	simply	simply	ADV	RB	_	3	advmod	_	_
5	copying	copy	VERB	VBG	_	3	xcomp	_	_
6	the	the	DET	DT	_	8	det	_	_
7	grammar	grammar	NOUN	NN	_	8	compound	_	_
8	rules	rule	NOUN	NNS	_	5	obj	_	_
9	,	,	PUNCT	,	_	10	punct	_	_
10	however	however	ADV	RB	_	3	advmod	_	_
11	,	,	PUNCT	,	_	16	punct	_	_
12	as	as	SCONJ	IN	_	16	mark	_	_
13	this	this	PRON	DT	_	16	nsubj	_	_
14	would	would	AUX	MD	_	16	aux	_	_
15	technically	technically	ADV	RB	_	16	advmod	_	_
16	turn	turn	VERB	VB	_	3	advcl	_	_
17	your	your	PRON	PRP$	_	18	nmod:poss	_	_
18	language	language	NOUN	NN	_	16	obj	_	_
19	into	into	ADP	IN	_	21	case	_	_
20	a	a	DET	DT	_	21	det	_	_
21	code	code	NOUN	NN	_	16	obl	_	_
22	.	.	PUNCT	.	_	3	punct	_	_

# sent_id = GUM_whow_languages-54
# text = Practice your language frequently so that you do n't forget it !
# s_type=imp
1	Practice	practice	VERB	VB	_	0	root	_	_
2	your	your	PRON	PRP$	_	3	nmod:poss	_	_
3	language	language	NOUN	NN	_	1	obj	_	_
4	frequently	frequently	ADV	RB	_	1	advmod	_	_
5	so	so	SCONJ	RB	_	10	mark	_	_
6	that	that	SCONJ	IN	_	10	mark	_	_
7	you	you	PRON	PRP	_	10	nsubj	_	_
8	do	do	AUX	VBP	_	10	aux	_	_
9	n't	n't	PART	RB	_	10	advmod	_	_
10	forget	forget	VERB	VB	_	1	advcl	_	_
11	it	it	PRON	PRP	_	10	obj	_	_
12	!	!	PUNCT	.	_	1	punct	_	_

# sent_id = GUM_whow_languages-55
# text = Do n't forget punctuation !
# s_type=imp
1	Do	do	AUX	VBP	_	3	aux	_	_
2	n't	n't	PART	RB	_	3	advmod	_	_
3	forget	forget	VERB	VB	_	0	root	_	_
4	punctuation	punctuation	NOUN	NN	_	3	obj	_	_
5	!	!	PUNCT	.	_	3	punct	_	_

# sent_id = GUM_whow_languages-56
# text = As a shortcut , and for a bit of interesting background , add connotation to various letters , preferably vowels .
# s_type=imp
1	As	as	ADP	IN	_	3	case	_	_
2	a	a	DET	DT	_	3	det	_	_
3	shortcut	shortcut	NOUN	NN	_	13	obl	_	_
4	,	,	PUNCT	,	_	8	punct	_	_
5	and	and	CCONJ	CC	_	8	cc	_	_
6	for	for	ADP	IN	_	8	case	_	_
7	a	a	DET	DT	_	8	det	_	_
8	bit	bit	NOUN	NN	_	1	conj	_	_
9	of	of	ADP	IN	_	11	case	_	_
10	interesting	interesting	ADJ	JJ	_	11	amod	_	_
11	background	background	NOUN	NN	_	8	nmod	_	_
12	,	,	PUNCT	,	_	3	punct	_	_
13	add	add	VERB	VB	_	0	root	_	_
14	connotation	connotation	NOUN	NN	_	13	obj	_	_
15	to	to	ADP	TO	_	17	case	_	_
16	various	various	ADJ	JJ	_	17	amod	_	_
17	letters	letter	NOUN	NNS	_	13	obl	_	_
18	,	,	PUNCT	,	_	17	punct	_	_
19	preferably	preferably	ADV	RB	_	13	advmod	_	_
20	vowels	vowel	NOUN	NNS	_	17	appos	_	_
21	.	.	PUNCT	.	_	13	punct	_	_

# sent_id = GUM_whow_languages-57
# text = To do this , think of various words that begin with / have a lot of a certain vowel .
# s_type=imp
1	To	To	PART	TO	_	2	mark	_	_
2	do	do	VERB	VB	_	13	csubj	_	_
3	this	this	PRON	DT	_	2	obj	_	_
4	,	,	PUNCT	,	_	2	punct	_	_
5	think	think	VERB	VB	_	0	root	_	_
6	of	of	ADP	IN	_	8	case	_	_
7	various	various	ADJ	JJ	_	8	amod	_	_
8	words	word	NOUN	NNS	_	5	obl	_	_
9	that	that	PRON	WDT	_	10	nsubj	_	_
10	begin	begin	VERB	VBP	_	8	acl:relcl	_	_
11	with	with	ADP	IN	_	10	compound:prt	_	_
12	/	/	PUNCT	SYM	_	13	punct	_	_
13	have	have	VERB	VBP	_	10	conj	_	_
14	a	a	DET	DT	_	15	det	_	_
15	lot	lot	NOUN	NN	_	13	obj	_	_
16	of	of	ADP	IN	_	19	case	_	_
17	a	a	DET	DT	_	19	det	_	_
18	certain	certain	ADJ	JJ	_	19	amod	_	_
19	vowel	vowel	NOUN	NN	_	15	nmod	_	_
20	.	.	PUNCT	.	_	5	punct	_	_

# sent_id = GUM_whow_languages-58
# text = For example : austere , acrimony , ebullient , embolden ; in this case , the vowel A might carry with it a negative meaning , whereas E would be positive .
# s_type=other
1	For	for	ADP	IN	_	2	case	_	_
2	example	example	NOUN	NN	_	20	obl	_	_
3	:	:	PUNCT	:	_	4	punct	_	_
4	austere	austere	ADJ	JJ	_	2	dep	_	_
5	,	,	PUNCT	,	_	6	punct	_	_
6	acrimony	acrimony	NOUN	NN	_	4	conj	_	_
7	,	,	PUNCT	,	_	8	punct	_	_
8	ebullient	ebullient	ADJ	JJ	_	4	conj	_	_
9	,	,	PUNCT	,	_	10	punct	_	_
10	embolden	embolden	VERB	VB	_	4	conj	_	_
11	;	;	PUNCT	:	_	2	punct	_	_
12	in	in	ADP	IN	_	14	case	_	_
13	this	this	DET	DT	_	14	det	_	_
14	case	case	NOUN	NN	_	20	obl	_	_
15	,	,	PUNCT	,	_	14	punct	_	_
16	the	the	DET	DT	_	17	det	_	_
17	vowel	vowel	NOUN	NN	_	20	nsubj	_	_
18	A	a	SYM	SYM	_	17	appos	_	_
19	might	might	AUX	MD	_	20	aux	_	_
20	carry	carry	VERB	VB	_	0	root	_	_
21	with	with	ADP	IN	_	22	case	_	_
22	it	it	PRON	PRP	_	20	obl	_	_
23	a	a	DET	DT	_	25	det	_	_
24	negative	negative	ADJ	JJ	_	25	amod	_	_
25	meaning	meaning	NOUN	NN	_	20	obj	_	_
26	,	,	PUNCT	,	_	31	punct	_	_
27	whereas	whereas	SCONJ	IN	_	31	mark	_	_
28	E	E	NOUN	NN	_	31	nsubj	_	_
29	would	would	AUX	MD	_	31	aux	_	_
30	be	be	AUX	VB	_	31	cop	_	_
31	positive	positive	ADJ	JJ	_	20	advcl	_	_
32	.	.	PUNCT	.	_	20	punct	_	_

# sent_id = GUM_whow_languages-59
# text = Then , even if you forget your own words without the help of your dictionary , you could still make a good guess based on the composition of the letters .
# s_type=sub
1	Then	then	ADV	RB	_	20	advmod	_	_
2	,	,	PUNCT	,	_	1	punct	_	_
3	even	even	ADV	RB	_	6	advmod	_	_
4	if	if	SCONJ	IN	_	6	mark	_	_
5	you	you	PRON	PRP	_	6	nsubj	_	_
6	forget	forget	VERB	VBP	_	20	advcl	_	_
7	your	your	PRON	PRP$	_	9	nmod:poss	_	_
8	own	own	ADJ	JJ	_	9	amod	_	_
9	words	word	NOUN	NNS	_	6	obj	_	_
10	without	without	ADP	IN	_	12	case	_	_
11	the	the	DET	DT	_	12	det	_	_
12	help	help	NOUN	NN	_	6	obl	_	_
13	of	of	ADP	IN	_	15	case	_	_
14	your	your	PRON	PRP$	_	15	nmod:poss	_	_
15	dictionary	dictionary	NOUN	NN	_	12	nmod	_	_
16	,	,	PUNCT	,	_	6	punct	_	_
17	you	you	PRON	PRP	_	20	nsubj	_	_
18	could	could	AUX	MD	_	20	aux	_	_
19	still	still	ADV	RB	_	20	advmod	_	_
20	make	make	VERB	VB	_	0	root	_	_
21	a	a	DET	DT	_	23	det	_	_
22	good	good	ADJ	JJ	_	23	amod	_	_
23	guess	guess	NOUN	NN	_	20	obj	_	_
24	based	base	VERB	VBN	_	23	acl	_	_
25	on	on	ADP	IN	_	27	case	_	_
26	the	the	DET	DT	_	27	det	_	_
27	composition	composition	NOUN	NN	_	24	obl	_	_
28	of	of	ADP	IN	_	30	case	_	_
29	the	the	DET	DT	_	30	det	_	_
30	letters	letter	NOUN	NNS	_	27	nmod	_	_
31	.	.	PUNCT	.	_	20	punct	_	_

# sent_id = GUM_whow_languages-60
# text = Try not to make your words sound like utter and complete gibberish just add a little extra than our regular English language .
# s_type=imp
1	Try	try	VERB	VB	_	0	root	_	_
2	not	not	PART	RB	_	4	advmod	_	_
3	to	to	PART	TO	_	4	mark	_	_
4	make	make	VERB	VB	_	7	xcomp	_	_
5	your	your	PRON	PRP$	_	6	nmod:poss	_	_
6	words	word	NOUN	NNS	_	4	obj	_	_
7	sound	sound	VERB	VBP	_	1	ccomp	_	_
8	like	like	ADP	IN	_	12	case	_	_
9	utter	utter	ADJ	JJ	_	12	amod	_	_
10	and	and	CCONJ	CC	_	11	cc	_	_
11	complete	complete	ADJ	JJ	_	9	conj	_	_
12	gibberish	gibberish	NOUN	NN	_	7	obl	_	_
13	just	just	ADV	RB	_	14	advmod	_	_
14	add	add	VERB	VB	_	4	parataxis	_	_
15	a	a	DET	DT	_	17	det	_	_
16	little	little	ADV	RB	_	17	nmod:npmod	_	_
17	extra	extra	ADJ	JJ	_	14	obj	_	_
18	than	than	ADP	IN	_	22	case	_	_
19	our	our	PRON	PRP$	_	22	nmod:poss	_	_
20	regular	regular	ADJ	JJ	_	22	amod	_	_
21	English	English	ADJ	JJ	_	22	amod	_	_
22	language	language	NOUN	NN	_	17	obl	_	_
23	.	.	PUNCT	.	_	1	punct	_	_

# sent_id = GUM_whow_languages-61
# text = We do n't want a knot in your tongue after speaking to your friends .
# s_type=decl
1	We	we	PRON	PRP	_	4	nsubj	_	_
2	do	do	AUX	VBP	_	4	aux	_	_
3	n't	n't	PART	RB	_	4	advmod	_	_
4	want	want	VERB	VB	_	0	root	_	_
5	a	a	DET	DT	_	6	det	_	_
6	knot	knot	NOUN	NN	_	4	obj	_	_
7	in	in	ADP	IN	_	9	case	_	_
8	your	your	PRON	PRP$	_	9	nmod:poss	_	_
9	tongue	tongue	NOUN	NN	_	6	nmod	_	_
10	after	after	SCONJ	IN	_	11	mark	_	_
11	speaking	speak	VERB	VBG	_	4	advcl	_	_
12	to	to	ADP	TO	_	14	case	_	_
13	your	your	PRON	PRP$	_	14	nmod:poss	_	_
14	friends	friend	NOUN	NNS	_	11	obl	_	_
15	.	.	PUNCT	.	_	4	punct	_	_

# sent_id = GUM_whow_languages-62
# text = Just put marks over the letters or make up something right on the spot , you might have to take some time on this !
# s_type=other
1	Just	just	ADV	RB	_	2	advmod	_	_
2	put	put	VERB	VB	_	18	parataxis	_	_
3	marks	mark	NOUN	NNS	_	2	obj	_	_
4	over	over	ADP	IN	_	6	case	_	_
5	the	the	DET	DT	_	6	det	_	_
6	letters	letter	NOUN	NNS	_	2	obl	_	_
7	or	or	CCONJ	CC	_	8	cc	_	_
8	make	make	VERB	VB	_	2	conj	_	_
9	up	up	ADP	RP	_	8	compound:prt	_	_
10	something	something	NOUN	NN	_	8	obj	_	_
11	right	right	ADV	RB	_	8	advmod	_	_
12	on	on	ADP	IN	_	14	case	_	_
13	the	the	DET	DT	_	14	det	_	_
14	spot	spot	NOUN	NN	_	8	obl	_	_
15	,	,	PUNCT	,	_	2	punct	_	_
16	you	you	PRON	PRP	_	18	obj	_	_
17	might	might	AUX	MD	_	18	aux	_	_
18	have	have	VERB	VB	_	0	root	_	_
19	to	to	PART	TO	_	20	mark	_	_
20	take	take	VERB	VB	_	18	xcomp	_	_
21	some	some	DET	DT	_	22	det	_	_
22	time	time	NOUN	NN	_	20	obj	_	_
23	on	on	ADP	IN	_	24	case	_	_
24	this	this	PRON	DT	_	22	nmod	_	_
25	!	!	PUNCT	.	_	18	punct	_	_

# sent_id = GUM_whow_languages-63
# text = Basing letters on objects ( pictographs ) is an easy way to start a writing system .
# s_type=decl
1	Basing	base	VERB	VBG	_	11	csubj	_	_
2	letters	letter	NOUN	NNS	_	1	obj	_	_
3	on	on	ADP	IN	_	4	case	_	_
4	objects	object	NOUN	NNS	_	1	obl	_	_
5	(	(	PUNCT	-LRB-	_	6	punct	_	_
6	pictographs	pictograph	NOUN	NNS	_	4	appos	_	_
7	)	)	PUNCT	-RRB-	_	6	punct	_	_
8	is	be	AUX	VBZ	_	11	cop	_	_
9	an	an	DET	DT	_	11	det	_	_
10	easy	easy	ADJ	JJ	_	11	amod	_	_
11	way	way	NOUN	NN	_	0	root	_	_
12	to	to	PART	TO	_	13	mark	_	_
13	start	start	VERB	VB	_	11	acl	_	_
14	a	a	DET	DT	_	16	det	_	_
15	writing	write	VERB	VBG	_	16	amod	_	_
16	system	system	NOUN	NN	_	13	obj	_	_
17	.	.	PUNCT	.	_	11	punct	_	_

# sent_id = GUM_whow_languages-64
# text = Try this with a group of friends .
# s_type=imp
1	Try	try	VERB	VB	_	0	root	_	_
2	this	this	PRON	DT	_	1	obj	_	_
3	with	with	ADP	IN	_	5	case	_	_
4	a	a	DET	DT	_	5	det	_	_
5	group	group	NOUN	NN	_	1	obl	_	_
6	of	of	ADP	IN	_	7	case	_	_
7	friends	friend	NOUN	NNS	_	5	nmod	_	_
8	.	.	PUNCT	.	_	1	punct	_	_

# sent_id = GUM_whow_languages-65
# text = It 's much more fun when there are other people that can understand your language .
# s_type=decl
1	It	it	PRON	PRP	_	5	nsubj	_	_
2	's	be	AUX	VBZ	_	5	cop	_	_
3	much	much	ADV	RB	_	4	advmod	_	_
4	more	more	ADJ	JJR	_	5	amod	_	_
5	fun	fun	NOUN	NN	_	0	root	_	_
6	when	when	SCONJ	WRB	_	8	advmod	_	_
7	there	there	PRON	EX	_	8	expl	_	_
8	are	be	VERB	VBP	_	5	acl	_	_
9	other	other	ADJ	JJ	_	10	amod	_	_
10	people	people	NOUN	NNS	_	8	nsubj	_	_
11	that	that	PRON	WDT	_	13	nsubj	_	_
12	can	can	AUX	MD	_	13	aux	_	_
13	understand	understand	VERB	VB	_	10	acl:relcl	_	_
14	your	your	PRON	PRP$	_	15	nmod:poss	_	_
15	language	language	NOUN	NN	_	13	obj	_	_
16	.	.	PUNCT	.	_	5	punct	_	_

# sent_id = GUM_whow_languages-66
# text = Email or text your friends the language so that they wo n't be so confused .
# s_type=imp
1	Email	Email	VERB	VB	_	0	root	_	_
2	or	or	CCONJ	CC	_	3	cc	_	_
3	text	text	VERB	VB	_	1	conj	_	_
4	your	your	PRON	PRP$	_	5	nmod:poss	_	_
5	friends	friend	NOUN	NNS	_	3	iobj	_	_
6	the	the	DET	DT	_	7	det	_	_
7	language	language	NOUN	NN	_	3	obj	_	_
8	so	so	SCONJ	RB	_	15	mark	_	_
9	that	that	SCONJ	IN	_	15	mark	_	_
10	they	they	PRON	PRP	_	15	nsubj:pass	_	_
11	wo	wo	AUX	MD	_	15	aux	_	_
12	n't	n't	PART	RB	_	15	advmod	_	_
13	be	be	AUX	VB	_	15	aux:pass	_	_
14	so	so	ADV	RB	_	15	advmod	_	_
15	confused	confuse	VERB	VBN	_	1	advcl	_	_
16	.	.	PUNCT	.	_	1	punct	_	_

# sent_id = GUM_whow_languages-67
# text = When making a writing system , take a break about every five minutes and come back to it or all your letters will begin to look identical .
# s_type=imp
1	When	when	SCONJ	WRB	_	2	advmod	_	_
2	making	make	VERB	VBG	_	7	advcl	_	_
3	a	a	DET	DT	_	5	det	_	_
4	writing	write	VERB	VBG	_	5	compound	_	_
5	system	system	NOUN	NN	_	2	obj	_	_
6	,	,	PUNCT	,	_	2	punct	_	_
7	take	take	VERB	VB	_	0	root	_	_
8	a	a	DET	DT	_	9	det	_	_
9	break	break	NOUN	NN	_	7	obj	_	_
10	about	about	ADV	RB	_	13	advmod	_	_
11	every	every	DET	DT	_	13	det	_	_
12	five	five	NUM	CD	_	13	nummod	_	_
13	minutes	minute	NOUN	NNS	_	7	nmod:npmod	_	_
14	and	and	CCONJ	CC	_	15	cc	_	_
15	come	come	VERB	VB	_	7	conj	_	_
16	back	back	ADP	RP	_	15	compound:prt	_	_
17	to	to	ADP	TO	_	18	case	_	_
18	it	it	PRON	PRP	_	15	obl	_	_
19	or	or	CCONJ	CC	_	24	cc	_	_
20	all	all	DET	PDT	_	22	det	_	_
21	your	your	PRON	PRP$	_	22	nmod:poss	_	_
22	letters	letter	NOUN	NNS	_	24	nsubj	_	_
23	will	will	AUX	MD	_	24	aux	_	_
24	begin	begin	VERB	VB	_	7	conj	_	_
25	to	to	PART	TO	_	26	mark	_	_
26	look	look	VERB	VB	_	24	xcomp	_	_
27	identical	identical	ADJ	JJ	_	26	xcomp	_	_
28	.	.	PUNCT	.	_	7	punct	_	_

# sent_id = GUM_whow_languages-68
# text = If you want to make other languages , you can use this language as a model and change some letters or sounds to create a different language .
# s_type=sub
1	If	if	SCONJ	IN	_	3	mark	_	_
2	you	you	PRON	PRP	_	3	nsubj	_	_
3	want	want	VERB	VBP	_	11	advcl	_	_
4	to	to	PART	TO	_	5	mark	_	_
5	make	make	VERB	VB	_	3	xcomp	_	_
6	other	other	ADJ	JJ	_	7	amod	_	_
7	languages	language	NOUN	NNS	_	5	obj	_	_
8	,	,	PUNCT	,	_	3	punct	_	_
9	you	you	PRON	PRP	_	11	nsubj	_	_
10	can	can	AUX	MD	_	11	aux	_	_
11	use	use	VERB	VB	_	0	root	_	_
12	this	this	DET	DT	_	13	det	_	_
13	language	language	NOUN	NN	_	11	obj	_	_
14	as	as	ADP	IN	_	16	case	_	_
15	a	a	DET	DT	_	16	det	_	_
16	model	model	NOUN	NN	_	11	obl	_	_
17	and	and	CCONJ	CC	_	18	cc	_	_
18	change	change	VERB	VB	_	11	conj	_	_
19	some	some	DET	DT	_	20	det	_	_
20	letters	letter	NOUN	NNS	_	18	obj	_	_
21	or	or	CCONJ	CC	_	22	cc	_	_
22	sounds	sound	NOUN	NNS	_	20	conj	_	_
23	to	to	PART	TO	_	24	mark	_	_
24	create	create	VERB	VB	_	18	advcl	_	_
25	a	a	DET	DT	_	27	det	_	_
26	different	different	ADJ	JJ	_	27	amod	_	_
27	language	language	NOUN	NN	_	24	obj	_	_
28	.	.	PUNCT	.	_	11	punct	_	_

# sent_id = GUM_whow_languages-69
# text = This makes your first language a proto-language — a language that branches off into a family of languages .
# s_type=decl
1	This	this	PRON	DT	_	2	nsubj	_	_
2	makes	make	VERB	VBZ	_	0	root	_	_
3	your	your	PRON	PRP$	_	5	nmod:poss	_	_
4	first	first	ADJ	JJ	_	5	amod	_	_
5	language	language	NOUN	NN	_	2	dep	_	_
6	a	a	DET	DT	_	7	det	_	_
7	proto-language	proto-language	NOUN	NN	_	2	obj	_	_
8	—	—	PUNCT	:	_	10	punct	_	_
9	a	a	DET	DT	_	10	det	_	_
10	language	language	NOUN	NN	_	7	appos	_	_
11	that	that	PRON	WDT	_	12	mark	_	_
12	branches	branch	VERB	VBZ	_	10	acl:relcl	_	_
13	off	off	ADP	RP	_	12	compound:prt	_	_
14	into	into	ADP	IN	_	16	case	_	_
15	a	a	DET	DT	_	16	det	_	_
16	family	family	NOUN	NN	_	12	obl	_	_
17	of	of	ADP	IN	_	18	case	_	_
18	languages	language	NOUN	NNS	_	16	nmod	_	_
19	.	.	PUNCT	.	_	2	punct	_	_

